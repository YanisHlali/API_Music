openapi: 3.0.2
servers:
  - url: http://localhost:3000
info:
  title: "API Web Musique"
  version: 1.0.0
  description: This is a Web API to get informations from a fictionnal audio streaming plateform.
paths:
    /genre:
      get:
        tags: [genre]
        summary: "List all genres"
        parameters:
          - name: page
            schema:
              type: integer
            in: query
            description: page of results to return
            required: false
        responses:
          200:
            description: "Successful operation"
      post:
        tags: [genre]
        summary: "Add a new genre"
        requestBody:
          description: "Genre object to be added"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                example:
                  name: "Rock"
        responses:
          201:
            description: "Artist created successfully"
          400:
            description: "Invalid request body"

    /genre/{id}:
      get:
        tags: [genre]
        summary: "Get a specific genre by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Genre id
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Genre not found
      put:
        tags: [genre]
        summary: "Update an genre by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Genre id
            required: true
          - name: genre_data
            in: body
            description: JSON object containing the updated genre data
            required: true
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the genre
              example:
                name: "Country"
        responses:
          200:
            description: "Track updated successfully"
          400:
            description: "Invalid input, object invalid"
          404:
            description: "Track not found"
      delete:
        tags: [genre]
        summary: "Delete a genre by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Genre id
            required: true
        responses:
          204:
            description: "Genre successfully deleted"
          400:
            description: "Genre not found"
    /genre/{name}:
      get:
        tags: [genre]
        summary: "Get a specific genre by name"
        parameters:
          - name: name
            schema:
              type: string
            in: path
            description: Genre name
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Genre not found
      
#=========================================================================#

    /artist:
      get:
        tags: [artist]
        summary: "List all artists"
        parameters:
          - name: page
            schema:
              type: integer
            in: query
            description: page of results to return
            required: false
        responses:
          200:
            description: "Successful operation"
      post:
        tags: [artist]
        summary: "Add a new artist"
        requestBody:
          description: "Artist object to be added"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  popularity:
                    type: integer
                  nationality:
                    type: string
                example:
                  name: "Rihanna"
                  popularity: 41
                  nationality: "Barbadian"
        responses:
          201:
            description: "Artist created successfully"
          400:
            description: "Invalid request body"
    /artist/{id}:
      get:
        tags: [artist]
        summary: "Get an artist by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Artist's id
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Artist not found
      put:
        tags: [artist]
        summary: "Update an artist by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Artist id
            required: true
          - name: artist_data
            in: body
            description: JSON object containing the updated artist data
            required: true
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the artist
                popularity:
                  type: integer
                  description: The new popularity of the artist
                nationality:
                  type: string
                  description: The new nationality of the artist
              example:
                name: "Patrick Bruel"
                popularity: 35
                nationality: "French"
        responses:
          200:
            description: "Artist updated successfully"
          400:
            description: "Invalid input, object invalid"
          404:
            description: "Artist not found"
      delete:
        tags: [artist]
        summary: "Delete an artist by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Artist id
            required: true
        responses:
          204:
            description: "Artist successfully deleted"
          400:
            description: "Artist not found"
    /artist/{name}:
      get:
        tags: [artist]
        summary: "Get an artist by name"
        parameters:
          - name: name
            schema:
              type: string
            in: path
            description: Artist's name
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Artist not found
    /artist/{nationality}:
      get:
        tags: [artist]
        summary: "Get an artist by it's nationality"
        parameters:
          - name: nationality
            schema:
              type: string
            in: path
            description: Artist's nationality
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Artist not found
    /artist/{popularity}:
      get:
        tags: [artist]
        summary: "Get an artist by it's popularity"
        parameters:
          - name: popularity
            schema:
              type: integer
            in: path
            description: Artist's popularity
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Artist not found

#=========================================================================#

    /album:
      get:
        tags: [album]
        summary: "List all albums"
        parameters:
          - name: page
            schema:
              type: integer
            in: query
            description: page of results to return
            required: false
        responses:
          200:
            description: "Successful operation"
      post:
        tags: [album]
        summary: "Add a new album"
        requestBody:
          description: "Album object to be added"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  artist:
                    type: integer
                    description: Artist's id
                  date:
                    type: string
                    format: date
                  genre:
                    type: integer
                    description: Genre id
                example:
                  name: "Yeezus"
                  artist: 41
                  date: "2021-02-17"
                  genre: 3
        responses:
          201:
            description: "Album created successfully"
          400:
            description: "Invalid request body"
    /album/{id}:
      get:
        tags: [album]
        summary: "Get an album by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Album id
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Album not found
      put:
        tags: [album]
        summary: "Update an album by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Album id
            required: true
          - name: album_data
            in: body
            description: JSON object containing the updated album data
            required: true
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the album
                artist:
                  type: integer
                  description: The new artist of the album
                date:
                  type: string
                  format: date
                  description: The new release date of the album
                genre:
                  type: integer
                  description: The new genre of the album
              example:
                name: "Circles"
                artist: 35
                date: "2021-02-17"
                genre: 6
        responses:
          200:
            description: "Album updated successfully"
          400:
            description: "Invalid input, object invalid"
          404:
            description: "Album not found"
      delete:
        tags: [album]
        summary: "Delete an album by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Album id
            required: true
        responses:
          204:
            description: "Album successfully deleted"
          400:
            description: "Album not found"
    /album/{name}:
      get:
        tags: [album]
        summary: "Get an album by name"
        parameters:
          - name: name
            schema:
              type: string
            in: path
            description: Album name
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Album not found
    /album/{date}:
      get:
        tags: [album]
        summary: "Get an album by date"
        parameters:
          - name: date
            schema:
              type: string
            in: path
            description: Album date
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Album not found
    /album/artist/{artistId}:
      get:
        tags: [album]
        summary: "List all albums by artist ID"
        parameters:
          - name: artistId
            in: path
            required: true
            description: "ID of the artist to return albums for"
            schema:
              type: integer
        responses:
          200:
            description: "Successful operation"
          404:
            description: "Artist not found"
    /album/genre/{genreId}:
      get:
        tags: [album]
        summary: "List all albums by genre ID"
        parameters:
          - name: genreId
            in: path
            required: true
            description: "ID of the genre to return albums for"
            schema:
              type: integer
        responses:
          200:
            description: "Successful operation"
          404:
            description: "Genre not found"
    /album/create:
      post:
        tags: [album]
        summary: "Create a new album"
        requestBody:
          description: "Album object to be added"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  date:
                    type: string
                    format: date
                  artist_id:
                    type: integer
                    description: "Artist's id"
                  genre_id:
                    type: integer
                    description: "Genre id"
                  track_ids:
                    type: string
                    description: "Comma-separated track ids"
        responses:
          200:
            description: "Album created successfully"
          400:
            description: "Invalid request body"
          404:
            description: "Not found"
    /album/update:
      post:
        tags: [album]
        summary: "Update an existing album by ID"
        requestBody:
          description: "Album object to be updated"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "Id of the album to be updated"
                  name:
                    type: string
                    description: "Updated name of the album"
                  date:
                    type: string
                    format: date
                    description: "Updated date of the album"
                  artist_id:
                    type: integer
                    description: "Updated artist's id"
                  genre_id:
                    type: integer
                    description: "Updated genre id"
                  track_ids:
                    type: string
                    description: "Comma-separated updated track ids"
        responses:
          200:
            description: "Album updated successfully"
          400:
            description: "Invalid request body"
          404:
            description: "Not found"
    /album/delete/{id}:
      get:
        tags: [album]
        summary: "Delete an album by ID"
        parameters:
          - name: id
            in: path
            description: "ID of the album to delete"
            required: true
            schema:
              type: integer
        responses:
          200:
            description: "Album deleted successfully"
          404:
            description: "Album not found"
    /album/addTrack:
      post:
        tags: [album]
        summary: "Add a track to an album"
        requestBody:
          description: "ID of the album and track to add"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "Album's id"
                  track_id:
                    type: integer
                    description: "Track's id"
        responses:
          200:
            description: "Track added to album successfully"
          404:
            description: "Invalid request"
    /album/removeTrack:
      post:
        tags: [album]
        summary: "Remove a track from an album"
        requestBody:
          description: "Album and track IDs for removing the track from the album"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: "ID of the album from which to remove the track"
                  track_id:
                    type: integer
                    description: "ID of the track to be removed from the album"
        responses:
          200:
            description: "Track removed successfully from the album"
          404:
            description: "Album or track not found"







    

#=========================================================================#

    /track:
      get:
        tags: [track]
        summary: "List all tracks"
        parameters:
          - name: page
            schema:
              type: integer
            in: query
            description: page of results to return
            required: false
        responses:
          200:
            description: "Successful operation"
      post:
        tags: [track]
        summary: "Add a new track"
        requestBody:
          description: "Track object to be added"
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  date:
                    type: string
                    format: date
                  popularity:
                    type: integer
                  time:
                    type: integer
                  genre:
                    type: integer
                    description: Genre id
                  album:
                    type: integer
                    description: Album id
                  artist:
                    type: integer
                    description: Artist's id 
                example:
                  name: "Karma Police"
                  date: "1997-08-25"
                  popularity: 15
                  time: 262
                  genre: 4
                  album: 154
                  artist: 247
        responses:
          201:
            description: "Track created successfully"
          400:
            description: "Invalid request body"
    /track/{id}:
      get:
        tags: [track]
        summary: "Get a specific track by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Track id
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Track not found
      put:
        tags: [track]
        summary: "Update a track by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Track id
            required: true
          - name: track_data
            in: body
            description: JSON object containing the updated track data
            required: true
            schema:
              type: object
              properties:
                  name:
                    type: string
                    description: The new name of the track
                  date:
                    type: string
                    format: date
                    description: The new release date of the track
                  popularity:
                    type: integer
                    description: The new popularity of the track
                  time:
                    type: integer
                    description: The new time of the track
                  genre:
                    type: integer
                    description: The new genre of the track
                  album:
                    type: integer
                    description: The new album of the track

                  artist:
                    type: integer
                    description: The new artist of the track
              example:
                  name: "If I Ain't Got You"
                  date: "2004-02-17"
                  popularity: 42
                  time: 187
                  genre: 3
                  album: 1305
                  artist: 1018
        responses:
          200:
            description: "Album updated successfully"
          400:
            description: "Invalid input, object invalid"
          404:
            description: "Album not found"
      delete:
        tags: [track]
        summary: "Delete an track by id"
        parameters:
          - name: id
            schema:
              type: integer
            in: path
            description: Track id
            required: true
        responses:
          204:
            description: "Track successfully deleted"
          400:
            description: "Album not found"
    /track/{name}:
      get:
        tags: [track]
        summary: "Get a track by name"
        parameters:
          - name: name
            schema:
              type: string
            in: path
            description: Track name
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Track not found
    /track/{date}:
      get:
        tags: [track]
        summary: "Get a track by date"
        parameters:
          - name: date
            schema:
              type: string
            in: path
            description: Track date
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Track not found
    /track/{popularity}:
      get:
        tags: [track]
        summary: "Get a track by it's popularity"
        parameters:
          - name: popularity
            schema:
              type: integer
            in: path
            description: Track popularity
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Track not found
    /track/{time}:
      get:
        tags: [track]
        summary: "Get a track by it's time in seconds"
        parameters:
          - name: time
            schema:
              type: integer
            in: path
            description: Track time in seconds
            required: true
        responses:
          200:
            description: Successful operation
          400:
            description: Track not found